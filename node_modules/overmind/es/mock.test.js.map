{"version":3,"file":"mock.test.js","sourceRoot":"","sources":["../src/mock.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAA0B,kBAAkB,EAAE,MAAM,IAAI,CAAA;AAE/D,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;IACpB,IAAI,CAAC,yBAAyB,EAAE,GAAG,EAAE;QAInC,MAAM,KAAK,GAAU;YACnB,GAAG,EAAE,KAAK;SACX,CAAA;QACD,MAAM,IAAI,GAAW,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE,EAAE;YAC1C,KAAK,CAAC,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;QACpC,CAAC,CAAA;QACD,MAAM,OAAO,GAAG,EAAE,IAAI,EAAE,CAAA;QACxB,MAAM,MAAM,GAAG,CAAC,GAAW,EAAE,EAAE,CAAC,GAAG,CAAA;QACnC,MAAM,OAAO,GAAG,EAAE,MAAM,EAAE,CAAA;QAC1B,MAAM,MAAM,GAAG;YACb,KAAK;YACL,OAAO;YACP,OAAO;SACR,CAAA;QAMD,MAAM,QAAQ,GAAG,kBAAkB,CAAC,MAAM,EAAE;YAC1C,MAAM,CAAC,GAAG;gBACR,OAAO,GAAG,GAAG,KAAK,CAAA;YACpB,CAAC;SACF,CAAC,CAAA;QAEF,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,CAAA;QAEvB,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC;YACjC;gBACE,MAAM,EAAE,KAAK;gBACb,IAAI,EAAE,KAAK;gBACX,IAAI,EAAE,CAAC,SAAS,CAAC;gBACjB,eAAe,EAAE,IAAI;gBACrB,SAAS,EAAE,GAAG;aACf;SACF,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IACF,IAAI,CAAC,qCAAqC,EAAE,GAAG,EAAE;QAI/C,MAAM,KAAK,GAAU;YACnB,GAAG,EAAE,KAAK;SACX,CAAA;QACD,MAAM,YAAY,GAAiB,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE;YAC/C,KAAK,CAAC,GAAG,IAAI,GAAG,CAAA;QAClB,CAAC,CAAA;QAED,MAAM,MAAM,GAAG;YACb,YAAY;YACZ,KAAK;SACN,CAAA;QAMD,MAAM,QAAQ,GAAG,kBAAkB,CAAC,MAAM,EAAE;YAC1C,MAAM;gBACJ,OAAO,MAAM,CAAA;YACf,CAAC;SACF,CAAC,CAAA;QAEF,QAAQ,CAAC,YAAY,EAAE,CAAA;QAEvB,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC;YACjC;gBACE,MAAM,EAAE,KAAK;gBACb,IAAI,EAAE,KAAK;gBACX,IAAI,EAAE,CAAC,MAAM,CAAC;gBACd,eAAe,EAAE,IAAI;gBACrB,SAAS,EAAE,GAAG;aACf;SACF,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import { IAction, IOnInitialize, createOvermindMock } from './'\n\ndescribe('Mock', () => {\n  test('should run action tests', () => {\n    type State = {\n      foo: string\n    }\n    const state: State = {\n      foo: 'bar',\n    }\n    const test: Action = ({ state, effects }) => {\n      state.foo = effects.effect('bar2')\n    }\n    const actions = { test }\n    const effect = (arg: string) => arg\n    const effects = { effect }\n    const config = {\n      state,\n      actions,\n      effects,\n    }\n\n    type Config = typeof config\n\n    interface Action<Input = void> extends IAction<Config, Input> {}\n\n    const overmind = createOvermindMock(config, {\n      effect(arg) {\n        return arg + '!!!'\n      },\n    })\n\n    overmind.actions.test()\n\n    expect(overmind.mutations).toEqual([\n      {\n        method: 'set',\n        path: 'foo',\n        args: ['bar2!!!'],\n        hasChangedValue: true,\n        delimiter: '.',\n      },\n    ])\n  })\n  test('should test onInitialize explicitly', () => {\n    type State = {\n      foo: string\n    }\n    const state: State = {\n      foo: 'bar',\n    }\n    const onInitialize: OnInitialize = ({ state }) => {\n      state.foo += '!'\n    }\n\n    const config = {\n      onInitialize,\n      state,\n    }\n\n    type Config = typeof config\n\n    interface OnInitialize extends IOnInitialize<Config> {}\n\n    const overmind = createOvermindMock(config, {\n      effect() {\n        return 'bar3'\n      },\n    })\n\n    overmind.onInitialize()\n\n    expect(overmind.mutations).toEqual([\n      {\n        method: 'set',\n        path: 'foo',\n        args: ['bar!'],\n        hasChangedValue: true,\n        delimiter: '.', \n      },\n    ])\n  })\n})\n"]}