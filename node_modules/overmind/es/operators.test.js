import { Overmind, pipe, map, forEach, filter, fork, when, wait, debounce, mutate, parallel, catchError, tryCatch, throttle, waitUntil, } from './';
describe('OPERATORS', () => {
    test('map', () => {
        expect.assertions(1);
        const test = pipe(map((_, value) => value.toUpperCase()), mutate(({ state }, value) => (state.foo = value)));
        const state = {
            foo: 'bar',
        };
        const config = {
            state,
            actions: {
                test,
            },
        };
        const overmind = new Overmind(config);
        return overmind.actions.test('foo').then(() => {
            expect(overmind.state.foo).toBe('FOO');
        });
    });
    test('map (async)', () => {
        expect.assertions(1);
        const test = pipe(map((_, value) => Promise.resolve(value.toUpperCase())), mutate(({ state }, value) => (state.foo = value)));
        const state = {
            foo: 'bar',
        };
        const config = {
            state,
            actions: {
                test,
            },
        };
        const overmind = new Overmind(config);
        return overmind.actions.test('foo').then(() => {
            expect(overmind.state.foo).toBe('FOO');
        });
    });
    test('forEach', () => {
        expect.assertions(1);
        let runCount = 0;
        const operator = (_, val, next) => {
            runCount++;
            next(null, val);
        };
        const test = pipe(forEach(operator));
        const config = {
            actions: {
                test,
            },
        };
        const overmind = new Overmind(config);
        return overmind.actions.test(['foo']).then(() => {
            expect(runCount).toEqual(1);
        });
    });
    test('parallel', () => {
        expect.assertions(1);
        let runCount = 0;
        const operator = (_, value, next) => {
            runCount++;
            next(null, value);
        };
        const test = pipe(parallel(operator, operator));
        const config = {
            actions: {
                test,
            },
        };
        const overmind = new Overmind(config);
        return overmind.actions.test('foo').then(() => {
            expect(runCount).toEqual(2);
        });
    });
    test('filter - truthy', () => {
        expect.assertions(1);
        const test = pipe(filter((_, value) => value === 'foo'), map((_, value) => value.toUpperCase()), mutate(({ state }, value) => (state.foo = value)));
        const state = {
            foo: 'bar',
        };
        const config = {
            state,
            actions: {
                test,
            },
        };
        const overmind = new Overmind(config);
        return overmind.actions.test('foo').then(() => {
            expect(overmind.state.foo).toBe('FOO');
        });
    });
    test('filter - falsy', () => {
        const test = pipe(filter((_, value) => value === 'bar'), map((_, value) => value.toUpperCase()), mutate(({ state }, value) => (state.foo = value)));
        const state = {
            foo: 'bar',
        };
        const config = {
            state,
            actions: {
                test,
            },
        };
        const overmind = new Overmind(config);
        return overmind.actions.test('foo').then(() => {
            expect(overmind.state.foo).toBe('bar');
        });
    });
    test('fork', () => {
        expect.assertions(1);
        let Key;
        (function (Key) {
            Key["Foo"] = "foo";
        })(Key || (Key = {}));
        const test = pipe(fork(() => Key.Foo, {
            [Key.Foo]: pipe(map((_, value) => {
                return value.toUpperCase();
            }), mutate(({ state }, value) => (state.foo = value))),
        }));
        const config = {
            state: {
                foo: 'bar',
            },
            actions: {
                test,
            },
        };
        const overmind = new Overmind(config);
        return overmind.actions.test('foo').then(() => {
            expect(overmind.state.foo).toBe('FOO');
        });
    });
    test('when', () => {
        expect.assertions(1);
        const test = pipe(when(() => true, {
            true: pipe(map((_, value) => value.toUpperCase()), mutate(({ state }, value) => (state.foo = value))),
            false: pipe(map((_, value) => Number(value)), mutate(({ state }, value) => (state.number = value))),
        }));
        const state = {
            foo: 'bar',
            number: 0,
        };
        const config = {
            state,
            actions: {
                test,
            },
        };
        const overmind = new Overmind(config);
        return overmind.actions.test('foo').then(() => {
            expect(overmind.state.foo).toBe('FOO');
        });
    });
    test('wait', () => {
        expect.assertions(1);
        const runTime = Date.now();
        const test = wait(500);
        const config = {
            actions: {
                test,
            },
        };
        const overmind = new Overmind(config);
        return overmind.actions.test().then(() => {
            expect(Date.now() - runTime).toBeGreaterThanOrEqual(500);
        });
    });
    test('debounce', () => {
        expect.assertions(1);
        const test = pipe(debounce(100), mutate(({ state }) => state.runCount++));
        const state = {
            runCount: 0,
        };
        const config = {
            state,
            actions: {
                test,
            },
        };
        const overmind = new Overmind(config);
        return Promise.all([overmind.actions.test(), overmind.actions.test()]).then(() => {
            expect(overmind.state.runCount).toBe(1);
        });
    });
    test('throttle', () => {
        expect.assertions(1);
        const test = pipe(throttle(0), mutate(({ state }) => state.runCount++));
        const state = {
            runCount: 0,
        };
        const config = {
            state,
            actions: {
                test,
            },
        };
        const overmind = new Overmind(config);
        return Promise.all([overmind.actions.test(), overmind.actions.test()]).then(() => {
            expect(overmind.state.runCount).toBe(1);
        });
    });
    test('catchError', () => {
        expect.assertions(3);
        const test = pipe(mutate(() => {
            throw new Error('wut?!?');
        }), mutate(({ state }) => {
            state.runCount++;
        }), catchError(({ state }, error) => {
            state.error = error.message;
            return 'hm';
        }), mutate(({ state }, value) => {
            state.foo = value;
        }));
        const state = {
            runCount: 0,
            foo: 'bar',
            error: '',
        };
        const config = {
            state,
            actions: {
                test,
            },
        };
        const overmind = new Overmind(config);
        return overmind.actions.test('baz').then(() => {
            expect(overmind.state.runCount).toBe(0);
            expect(overmind.state.error).toBe('wut?!?');
            expect(overmind.state.foo).toBe('hm');
        });
    });
    test('tryCatch - resolves', () => {
        expect.assertions(1);
        const test = tryCatch({
            try: mutate(({ state }, value) => {
                state.foo = value;
            }),
            catch: mutate(() => { }),
        });
        const state = {
            foo: 'bar',
        };
        const config = {
            state,
            actions: {
                test,
            },
        };
        const overmind = new Overmind(config);
        return overmind.actions.test('baz').then(() => {
            expect(overmind.state.foo).toBe('baz');
        });
    });
    test('tryCatch - fails', () => {
        expect.assertions(1);
        const test = pipe(tryCatch({
            try: mutate(() => {
                throw new Error('ehm');
            }),
            catch: mutate(({ state }, value) => {
                state.foo = value.message;
            }),
        }));
        const state = {
            foo: 'bar',
        };
        const config = {
            state,
            actions: {
                test,
            },
        };
        const overmind = new Overmind(config);
        return overmind.actions.test('baz').then(() => {
            expect(overmind.state.foo).toBe('ehm');
        });
    });
    test('waitUntil', () => {
        expect.assertions(1);
        const increaseCount = pipe(mutate(({ state }) => state.runCount++));
        const test = pipe(waitUntil((state) => state.runCount === 1), mutate(({ state }) => (state.hasRun = true)));
        const state = {
            runCount: 0,
            hasRun: false,
        };
        const config = {
            state,
            actions: {
                increaseCount,
                test,
            },
        };
        const overmind = new Overmind(config);
        setTimeout(() => {
            overmind.actions.increaseCount();
        }, 0);
        return overmind.actions.test().then(() => {
            expect(overmind.state.runCount).toBe(1);
        });
    });
});
//# sourceMappingURL=operators.test.js.map