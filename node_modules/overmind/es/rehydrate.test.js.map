{"version":3,"file":"rehydrate.test.js","sourceRoot":"","sources":["../src/rehydrate.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { SERIALIZE, rehydrate } from './'\n\ndescribe('REHYDRATE', () => {\n  test('should allow rehydration', () => {\n    expect.assertions(1)\n    const state = {\n      foo: 'bar'\n    }\n    rehydrate(state, {\n      foo: 'bar2'\n    })\n\n    expect(state).toEqual({\n      foo: 'bar2'\n    })\n  })\n  test('should allow rehydration by mutations', () => {\n    expect.assertions(1)\n    const state = {\n      foo: 'bar'\n    }\n    rehydrate(state, [{\n      method: 'set',\n      args: ['bar2'],\n      hasChangedValue: false,\n      path: 'foo',\n      revert: () => {}\n    }])\n\n    expect(state).toEqual({\n      foo: 'bar2'\n    })\n  })\n  test.only('should allow rehydration of single class value', () => {\n    expect.assertions(1)\n    class User {\n      name = 'Bob'\n      toJSON() {\n        return {\n          [SERIALIZE]: true,\n          name: this.name\n        }\n      }\n      static fromJSON(json) {\n        return Object.assign(new User(), json)\n      }\n    }\n    type State = {\n      user: User | null\n      user2: User\n    }\n    const state: State = {\n      user: null,\n      user2: new User(),\n    }\n    rehydrate(state, {\n      user: {\n        name: 'Bob2'\n      },\n      user2: {\n        name: 'Bob2'\n      }\n    }, {\n      user: User.fromJSON,\n      user2: User.fromJSON,\n    })\n\n    expect(state).toEqual({\n      user: {\n        name: 'Bob2'\n      },\n      user2: {\n        name: 'Bob2'\n      }\n    })\n  })\n  test('should allow rehydration of array', () => {\n    expect.assertions(2)\n    class User {\n      [SERIALIZE]\n      name = 'Bob'\n      static fromJSON(json) {\n        return Object.assign(new User(), json)\n      }\n    }\n    type State = {\n      users: User[] \n    }\n    const state: State = {\n      users: [],\n    }\n    rehydrate(state, {\n      users: [{\n        name: 'Bob2'\n      }, {\n        name: 'Bob3'\n      }]\n    }, {\n      users: User.fromJSON,\n    })\n\n    expect(state.users[0]).toBeInstanceOf(User)\n    expect(state.users[1]).toBeInstanceOf(User)\n  })\n  test('should allow rehydration of dictionary', () => {\n    expect.assertions(2)\n    class User {\n      [SERIALIZE]\n      name = 'Bob'\n      static fromJSON(json) {\n        return Object.assign(new User(), json)\n      }\n    }\n    type State = {\n      users: { [key: string]: User }\n    }\n    const state: State = {\n      users: {},\n    }\n    rehydrate(state, {\n      users: {\n        'id1': {\n          name: 'Bob2'\n        },\n        'id2': {\n          name: 'Bob3'\n        }\n      }\n    }, {\n      users: User.fromJSON,\n    })\n\n    expect(state.users.id1).toBeInstanceOf(User)\n    expect(state.users.id2).toBeInstanceOf(User)\n  })\n})"]}