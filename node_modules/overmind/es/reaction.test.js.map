{"version":3,"file":"reaction.test.js","sourceRoot":"","sources":["../src/reaction.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { IAction, IState, Overmind } from './'\n\ntype State = {\n  foo: string\n  upperFoo: string\n}\n\ndescribe('Reaction', () => {\n  test('should create reaction', () => {\n    expect.assertions(2)\n\n    let runCount = 0\n\n    type State = {\n      foo: string\n    }\n    const state: State = {\n      foo: 'bar',\n    }\n\n    const changeFoo: Action = ({ state }) => {\n      state.foo = 'bar2'\n    }\n\n    const config = {\n      state,\n      actions: {\n        changeFoo,\n      },\n    }\n\n    type Config = typeof config\n    interface Action<Input = void> extends IAction<Config, Input> {}\n\n    const app = new Overmind(config)\n\n    app.reaction(\n      ({ foo }) => foo,\n      (foo) => {\n        runCount++\n        expect(foo).toBe('bar2')\n      }\n    )\n\n    app.actions.changeFoo()\n\n    expect(runCount).toBe(1)\n  })\n  test('should create deep reaction', () => {\n    expect.assertions(2)\n\n    let runCount = 0\n\n    type State = {\n      foo: {\n        bar: string\n      }\n    }\n    const state: State = {\n      foo: {\n        bar: 'baz',\n      },\n    }\n\n    const changeFoo: Action = ({ state }) => {\n      state.foo.bar = 'baz2'\n    }\n\n    const config = {\n      state,\n      actions: {\n        changeFoo,\n      },\n    }\n\n    type Config = typeof config\n    interface Action<Input = void> extends IAction<Config, Input> {}\n\n    const app = new Overmind(config)\n\n    app.reaction(\n      ({ foo }) => foo,\n      (foo) => {\n        runCount++\n        expect(foo.bar).toBe('baz2')\n      },\n      { nested: true }\n    )\n\n    app.actions.changeFoo()\n\n    expect(runCount).toBe(1)\n  })\n  test('should throw deep reaction when invalid return object', () => {\n    expect.assertions(1)\n\n    let runCount = 0\n\n    type State = {\n      foo: {\n        bar: string\n      }\n    }\n    const state: State = {\n      foo: {\n        bar: 'baz',\n      },\n    }\n\n    const changeFoo: Action = ({ state }) => {\n      state.foo.bar = 'baz2'\n    }\n\n    const config = {\n      state,\n      actions: {\n        changeFoo,\n      },\n    }\n\n    type Config = typeof config\n    interface Action<Input = void> extends IAction<Config, Input> {}\n\n    const app = new Overmind(config)\n\n    expect(() => {\n      app.reaction(\n        ({ foo }) => foo.bar,\n        (bar) => {\n          runCount++\n          expect(bar).toBe('baz2')\n        },\n        { nested: true }\n      )\n    }).toThrow()\n  })\n})\n"]}