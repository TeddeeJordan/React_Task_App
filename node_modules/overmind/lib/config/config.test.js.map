{"version":3,"file":"config.test.js","sourceRoot":"","sources":["../../src/config/config.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { Overmind, createOvermindMock } from '../'\nimport { lazy, merge, namespaced } from './'\n\ndescribe('Config', () => {\n  test('should merge configs', () => {\n    const configA = {\n      state: {\n        foo: 'bar',\n      },\n    }\n    const configB = {\n      state: {\n        bar: 'baz',\n      },\n    }\n    const merged = merge(configA, configB)\n\n    expect(merged.state.foo).toEqual('bar')\n    expect(merged.state.bar).toEqual('baz')\n  })\n\n  test('should namespace', () => {\n    const configA = {\n      state: {\n        foo: 'bar',\n      },\n    }\n    const configB = {\n      state: {\n        bar: 'baz',\n      },\n    }\n    const merged = namespaced({ configA, configB })\n    expect(merged.state.configA.foo).toEqual('bar')\n    expect(merged.state.configB.bar).toEqual('baz')\n  })\n\n  test('should create lazy config', () => {\n    const configA = () =>\n      Promise.resolve({\n        state: {\n          foo: 'bar',\n        },\n        actions: {\n          returnStateFromB({ state }) {\n            return state.configB.bar\n          },\n        },\n      })\n    const configB = () =>\n      Promise.resolve({\n        state: {\n          bar: 'baz',\n        },\n      })\n    const merged = merge(\n      {\n        actions: {\n          loadConfigB: ({ effects }) => {\n            return effects.lazy.loadConfig('configB')\n          },\n        },\n      },\n      lazy({ configA, configB })\n    )\n    const app = new Overmind(merged)\n\n    return Promise.all([\n      app.actions.lazy.loadConfig('configA'),\n      app.actions.loadConfigB(),\n    ]).then(() => {\n      // @ts-ignore\n      expect(app.state.configA.foo).toEqual('bar')\n      // @ts-ignore\n      expect(app.state.configB.bar).toEqual('baz')\n      // @ts-ignore\n      expect(app.actions.configA.returnStateFromB()).toEqual('baz')\n    })\n  })\n\n  test('should merge normal and namespaced', () => {\n    const configA = {\n      state: {\n        foo: 'bar',\n      },\n    }\n    const configB = {\n      state: {\n        bar: 'baz',\n      },\n    }\n    const merged = merge(configA, namespaced({ configB }))\n\n    expect(merged.state.foo).toEqual('bar')\n    expect(merged.state.configB.bar).toEqual('baz')\n  })\n\n  test('should keep context when lazy loading namespaces', async () => {\n    const config = {\n      state: {\n        foo: 'bar',\n      },\n      actions: {\n        changeFoo(context) {\n          context.state.config.foo = 'bar2'\n        }\n      }\n    }\n    \n    const overmind = createOvermindMock(lazy({\n      config: () => Promise.resolve(config)\n    }))\n\n    await overmind.onInitialize()\n\n    await overmind.actions.lazy.loadConfig('config')\n    // @ts-ignore\n    overmind.actions.config.changeFoo()\n    expect(overmind.state.config!.foo).toEqual('bar2')\n    \n  })\n})\n"]}