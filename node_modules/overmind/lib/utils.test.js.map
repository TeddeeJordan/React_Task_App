{"version":3,"file":"utils.test.js","sourceRoot":"","sources":["../src/utils.test.ts"],"names":[],"mappings":";;AAAA,mCAAsD;AAEtD,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;IACxB,IAAI,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAC9C,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;QACpB,MAAM,QAAQ,GAAG;YACb,KAAK,EAAE,CAAC;YACR,IAAI,YAAY,KAAK,OAAO,IAAI,CAAC,KAAK,GAAG,CAAC,CAAA,CAAC,CAAC;SAC/C,CAAA;QACD,MAAM,IAAI,GAAG,gBAAQ,CAAC,QAAQ,CAAC,CAAA;QAC/B,IAAI,CAAC,KAAK,GAAG,EAAE,CAAA;QACf,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;IACpC,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA;AAEF,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,IAAI,CAAC,gEAAgE,EAAE,GAAG,EAAE;QAC1E,MAAM,MAAM,GAAG;YACb,GAAG,EAAE,KAAK;SACX,CAAA;QACD,MAAM,MAAM,GAAG;YACb,GAAG,EAAE,MAAM;SACZ,CAAA;QACD,MAAM,SAAS,GAAG,0BAAkB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;QACpD,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QACrC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;IAC3C,CAAC,CAAC,CAAA;IACF,IAAI,CAAC,uEAAuE,EAAE,GAAG,EAAE;QACjF,MAAM,MAAM,GAAG;YACb,GAAG,EAAE;gBACH,GAAG,EAAE;oBACH,GAAG,EAAE,KAAK;iBACX;aACF;SACF,CAAA;QACD,MAAM,MAAM,GAAG;YACb,GAAG,EAAE;gBACH,GAAG,EAAE;oBACH,GAAG,EAAE,MAAM;iBACZ;aACF;SACF,CAAA;QACD,MAAM,SAAS,GAAG,0BAAkB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;QACpD,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QAChC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAA;QAC7C,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;IAC3C,CAAC,CAAC,CAAA;IACF,IAAI,CAAC,0EAA0E,EAAE,GAAG,EAAE;QACpF,MAAM,MAAM,GAAG;YACb,GAAG,EAAE;gBACH,GAAG,EAAE;oBACH,GAAG,EAAE,KAAK;iBACX;aACF;SACF,CAAA;QACD,MAAM,MAAM,GAAG;YACb,GAAG,EAAE;gBACH,GAAG,EAAE,EAEJ;aACF;SACF,CAAA;QACD,MAAM,SAAS,GAAG,0BAAkB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;QACpD,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QAChC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAA;QAC7C,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;IAC3C,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import { deepCopy, getChangeMutations } from './utils'\n\ndescribe('deepCopy', () => {\n  test('should be able to preserve getters', () => {\n    expect.assertions(1)\n    const original = {\n        value: 0,\n        get valuePlusTwo() { return this.value + 2 }\n    }\n    const copy = deepCopy(original)\n    copy.value = 15\n    expect(copy.valuePlusTwo).toBe(17)\n  })\n})\n\ndescribe('getChangeMutations', () => {\n  test('should be able to create a set mutation when value has changed', () => {\n    const stateA = {\n      foo: 'bar'\n    }\n    const stateB = {\n      foo: 'bar2',\n    }\n    const mutations = getChangeMutations(stateA, stateB)\n    expect(mutations[0].path).toBe('foo')\n    expect(mutations[0].args[0]).toBe('bar2')\n  })\n  test('should be able to create a set mutation when nested value has changed', () => {\n    const stateA = {\n      foo: {\n        bar: {\n          baz: 'mip'\n        }\n      }\n    }\n    const stateB = {\n      foo: {\n        bar: {\n          baz: 'mip2'\n        }\n      }\n    }\n    const mutations = getChangeMutations(stateA, stateB)\n    expect(mutations.length).toBe(1)\n    expect(mutations[0].path).toBe('foo.bar.baz')\n    expect(mutations[0].args[0]).toBe('mip2')\n  })\n  test('should be able to create an unset mutation when key is not there anymore', () => {\n    const stateA = {\n      foo: {\n        bar: {\n          baz: 'mip'\n        }\n      }\n    }\n    const stateB = {\n      foo: {\n        bar: {\n          \n        }\n      }\n    }\n    const mutations = getChangeMutations(stateA, stateB)\n    expect(mutations.length).toBe(1)\n    expect(mutations[0].path).toBe('foo.bar.baz')\n    expect(mutations[0].method).toBe('unset')\n  })\n})"]}